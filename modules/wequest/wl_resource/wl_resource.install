<?php
/**
 * Implements hook_install().
 */
function wl_resource_install() {
  //you need to include this translation function
  $t = get_t();
  // define the type
  $type = array(
    'type' => 'resource',
    'name' => $t('Resource'),
    'base' => 'node_content',
    'title_label' => $t('Name of Resource'),
    'custom' => FALSE,
    'locked' => TRUE
  );
  // set default values for anything not explicitly defined in the above array
  $content_type = node_type_set_defaults($type);
  // create the content type
  node_type_save($content_type);
  //create all the fields

  $field = array(
  'translatable' => '0',
  'settings' => array(),
  'field_name' => 'field_wl_resource_description',
  'type' => 'text_long',
  'active' => '1',
  'locked' => '0',
  'cardinality' => '1',
);
field_create_field($field);

$instance = array(
  'label' => 'Resource Description',
  'widget' => array(
    'weight' => '2',
    'type' => 'text_textarea',
    'active' => 1,
    'settings' => array(
      'rows' => '5',
    ),
  ),
  'settings' => array(
    'text_processing' => '0',
    'user_register_form' => FALSE,
  ),
  'display' => array(
    'default' => array(
      'label' => 'hidden',
      'type' => 'text_default',
      'weight' => '1',
      'settings' => array(),
    ),
    'teaser' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
    'grid_thumbnail' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
    'event_resource_listing' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
  ),
  'required' => 0,
  'description' => '',
  'default_value' => NULL,
  'field_name' => 'field_wl_resource_description',
  'entity_type' => 'node',
  'bundle' => 'resource',
);
field_create_instance($instance);

$field = array(
  'translatable' => '0',
  'settings' => array(
    'allowed_values' => array(
      0 => array(
        'vocabulary' => 'resources',
        'parent' => '0',
      ),
    ),
  ),
  'field_name' => 'field_wl_resource_tags',
  'type' => 'taxonomy_term_reference',
  'active' => '1',
  'locked' => '0',
  'cardinality' => '-1',
);
field_create_field($field);

$instance = array(
  'label' => 'Resource Tags',
  'widget' => array(
    'weight' => '4',
    'type' => 'autocomplete_deluxe_taxonomy',
    'active' => 1,
    'settings' => array(
      'size' => '60',
      'limit' => '10',
      'min_length' => '0',
      'delimiter' => '',
      'autocomplete_deluxe_path' => 'autocomplete_deluxe/taxonomy',
    ),
  ),
  'settings' => array(
    'user_register_form' => FALSE,
  ),
  'display' => array(
    'default' => array(
      'label' => 'hidden',
      'type' => 'taxonomy_term_reference_link',
      'weight' => '3',
      'settings' => array(),
    ),
    'teaser' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
    'grid_thumbnail' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
    'event_resource_listing' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
  ),
  'required' => 0,
  'description' => 'Please enter some keywords that describe the category of this resource.',
  'default_value' => NULL,
  'field_name' => 'field_wl_resource_tags',
  'entity_type' => 'node',
  'bundle' => 'resource',
);
field_create_instance($instance);

$field = array(
  'translatable' => '0',
  'settings' => array(
    'allowed_values' => array(
      'New ' => ' New',
      'As New ' => ' As New',
      'Used ' => ' Used',
    ),
    'allowed_values_function' => '',
  ),
  'field_name' => 'field_wl_resource_condition',
  'type' => 'list_text',
  'active' => '1',
  'locked' => '0',
  'cardinality' => '-1',
);
field_create_field($field);

$instance = array(
  'label' => 'Resource Condition',
  'widget' => array(
    'weight' => '3',
    'type' => 'options_select',
    'active' => 1,
    'settings' => array(),
  ),
  'settings' => array(
    'user_register_form' => FALSE,
  ),
  'display' => array(
    'default' => array(
      'label' => 'above',
      'type' => 'list_default',
      'weight' => '2',
      'settings' => array(),
    ),
    'teaser' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
    'grid_thumbnail' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
    'event_resource_listing' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
  ),
  'required' => 0,
  'description' => 'Please select the condition of the resource.',
  'default_value' => NULL,
  'field_name' => 'field_wl_resource_condition',
  'entity_type' => 'node',
  'bundle' => 'resource',
);
field_create_instance($instance);

$field = array(
  'translatable' => '0',
  'settings' => array(
    'uri_scheme' => 'public',
    'default_image' => 0,
  ),
  'field_name' => 'field_wl_resource_image',
  'type' => 'image',
  'active' => '1',
  'locked' => '0',
  'cardinality' => '3',
);
field_create_field($field);

$instance = array(
  'label' => 'Resource Image',
  'widget' => array(
    'weight' => '1',
    'type' => 'image_image',
    'active' => 1,
    'settings' => array(
      'progress_indicator' => 'throbber',
      'preview_image_style' => 'medium',
    ),
  ),
  'settings' => array(
    'file_directory' => 'resources',
    'file_extensions' => 'png gif jpg jpeg',
    'max_filesize' => '4096 KB',
    'max_resolution' => '1280x1024',
    'min_resolution' => '640x480',
    'alt_field' => 0,
    'title_field' => 1,
    'default_image' => 0,
    'user_register_form' => FALSE,
  ),
  'display' => array(
    'default' => array(
      'label' => 'hidden',
      'type' => 'image',
      'weight' => '0',
      'settings' => array(
        'image_style' => '',
        'image_link' => '',
      ),
    ),
    'teaser' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
    'grid_thumbnail' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
    'event_resource_listing' => array(
      'type' => 'hidden',
      'label' => 'above',
      'settings' => array(),
      'weight' => 0,
    ),
  ),
  'required' => 0,
  'description' => 'Please upload an image that describes the resource.',
  'field_name' => 'field_wl_resource_image',
  'entity_type' => 'node',
  'bundle' => 'resource',
);
field_create_instance($instance);



taxonomy_vocabulary_save((object) array(
  'name' => 'Resources',
  'machine_name' => 'resources',
));

}



function wl_resource_uninstall() {
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(
    ':type' => 'wl_resource'
  ));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  node_delete_multiple($nids);

  $instances = field_info_instances('node', 'resource');
  foreach ($instances as $instance) {
    field_delete_field($instance);
  }

  // foreach (array_keys(_wl_resource_fields()) as $field) {
  //   field_delete_field($field);
  // }
  node_type_delete('resource');
  // delete the content type
  variable_del('node_preview_resource');
  // node type rebuilds
  node_types_rebuild();
  // rebuild the menus
  menu_rebuild();
  // Purge all field information
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}
/**
 * Create and optionally populate a vocabulary
 */
function _wl_resource_create_vocabulary($vocabulary) {
  // Skip if vocabulary already exists
  if (taxonomy_vocabulary_machine_name_load($vocabulary['machine_name'])) {
    return true;
  }
  taxonomy_vocabulary_save((object) array(
    'name' => $vocabulary['name'],
    'machine_name' => $vocabulary['machine_name'],
    'module' => $vocabulary['module'],
    'namespace' => $vocabulary['namespace']
  ));
  $new_vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary['machine_name']);
  foreach ($vocabulary['terms'] as $term) {
    taxonomy_term_save((object) array(
      'name' => $term,
      'vid' => $new_vocabulary->vid,
      'namespace' => $vocabulary['namespace']
    ));
  }
  return true;
}
